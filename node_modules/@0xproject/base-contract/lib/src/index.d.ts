/// <reference types="ethers-contracts" />
import { ContractAbi, DataItem, MethodAbi, Provider, TxData, TxDataPayable } from '@0xproject/types';
import { Web3Wrapper } from '@0xproject/web3-wrapper';
import * as ethersContracts from 'ethers-contracts';
export interface EthersInterfaceByFunctionSignature {
    [key: string]: ethersContracts.Interface;
}
export declare class BaseContract {
    protected _ethersInterfacesByFunctionSignature: EthersInterfaceByFunctionSignature;
    protected _web3Wrapper: Web3Wrapper;
    abi: ContractAbi;
    address: string;
    protected static _formatABIDataItemList(abis: DataItem[], values: any[], formatter: (type: string, value: any) => any): any;
    protected static _lowercaseAddress(type: string, value: string): string;
    protected static _bigNumberToString(type: string, value: any): any;
    protected static _bnToBigNumber(type: string, value: any): any;
    protected _applyDefaultsToTxDataAsync<T extends Partial<TxData | TxDataPayable>>(txData: T, estimateGasAsync?: (txData: T) => Promise<number>): Promise<TxData>;
    protected _lookupEthersInterface(functionSignature: string): ethersContracts.Interface;
    protected _lookupAbi(functionSignature: string): MethodAbi;
    constructor(abi: ContractAbi, address: string, provider: Provider, defaults?: Partial<TxData>);
}
